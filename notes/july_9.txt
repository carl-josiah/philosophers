1. Implement the Monitor Thread First
The monitor is responsible for detecting if any philosopher has died.
It checks each philosopher’s last_meal_time in a loop (every 1–2ms).
If a philosopher has not eaten in time_to_die, it sets a shared death flag and prints the death message.
Why first?
Because your custom sleep and routines will depend on this flag to know when to stop.

2. Implement the Shared Death Flag
This is a variable (protected by a mutex) that all threads check.
When the monitor detects a death, it sets this flag.
All philosophers check this flag and exit their routines if it is set.

3. Implement the Custom Sleep Function
Replace all usleep() calls with your custom sleep.
The custom sleep should:
Sleep in small increments (e.g., 500us).
Check the death flag (and optionally the philosopher’s own death condition) between increments.
Return early if the death flag is set.

4. Update Philosopher Routines
In all routines (eating, sleeping, thinking), use the custom sleep.
Check the death flag before and after each action, and inside the custom sleep.
Exit the routine as soon as the flag is set.

5. Other Requirements
Lock forks in a consistent order.
Update last_meal_time immediately after acquiring both forks and before eating.
Protect all shared data with mutexes.
Handle the single philosopher edge case.
Summary of Steps
Monitor thread (detects death, sets flag)
Shared death flag (all threads check this)
Custom sleep (checks flag, sleeps in increments)
Update routines (use custom sleep, check flag)
Other requirements (fork order, mutexes, edge cases)
You do NOT need to finish the monitor before writing your custom sleep, but the monitor must be running for the custom sleep to work as intended.
It’s best to implement the monitor and flag first, then the custom sleep, then update your routines.

Let me know if you want code templates for any of these steps!